1
00:00:00,000 --> 00:00:01,860
이번 비디오에서는 포인터에 대해 배우겠습니다.
 
2
00:00:01,860 --> 00:00:03,300
포인터는 C에서 가장 중요한
 
3
00:00:03,300 --> 00:00:06,000
변수의 유형 중 하나입니다.
 
4
00:00:06,000 --> 00:00:08,280
포인터는 메모리를 관리할 수 있도록 해줘요.
 
5
00:00:08,280 --> 00:00:10,320
메모리에 대해 짧게 얘기해볼게요.
 
6
00:00:10,320 --> 00:00:11,820
우리가 알아야 할 것은
 
7
00:00:11,820 --> 00:00:13,490
개념적으로, 모든 프로세스는 시작할 때

8
00:00:13,490 --> 00:00:16,800
아키텍처 메모리로 액세스한다는 것입니다.
 
9
00:00:16,800 --> 00:00:21,119
즉, (32비트라면) 4GB의 메모리에의 액세스 한다는 뜻이죠.

10
00:00:21,119 --> 00:00:22,590
심지어 RAM 메모리가 4GB가 아닐 때도요.  

11
00:00:22,590 --> 00:00:27,930
(만약 64비트 운영체제라면 훨씬 크겠죠) 메모리는 크게 두 부분으로 나뉩니다 :
 
12
00:00:27,930 --> 00:00:31,949
우리는 “스택”에 대해 자주 얘기해요. 여러분도 듣게 될 거고, 혹은 이미 들어봤겠죠.
 
13
00:00:31,949 --> 00:00:33,090
스택은 메모리의 가장 높은 곳에 위치합니다.
 
14
00:00:33,090 --> 00:00:34,350
높은 주소예요.
 
15
00:00:34,350 --> 00:00:35,790
스택 메모리는 가상 메모리의 높은 주소에서

16
00:00:35,790 --> 00:00:37,440
낮은 주소로 내려옵니다.
 
17
00:00:37,440 --> 00:00:39,540
이제 우리는 “힙” 메모리를 가집니다. 나중에 또 볼 거예요.
 
18
00:00:39,540 --> 00:00:42,059
힙 메모리는 주소의 가장 낮은 곳에서부터 시작해
 
19
00:00:42,059 --> 00:00:45,149
위로 올라가죠.
 
20
00:00:45,149 --> 00:00:48,239
참고로 메모리는, 제가 가상이라고 말씀드렸는데,
 
21
00:00:48,239 --> 00:00:51,000
실제로는 물리적인 어딘가에 매핑됩니다 :
 
22
00:00:51,000 --> 00:00:53,760
램 메모리에든, 하드 드라이브에든 말이죠.

23
00:00:53,760 --> 00:00:54,750
스왑이 뭔지 보여드릴게요.
 
24
00:00:54,750 --> 00:00:56,460
왜냐하면 만약에
 
25
00:00:56,460 --> 00:00:59,670
32비트 운영체제의 4GB 램을 쓰겠다고 말했는데,
 
26
00:00:59,670 --> 00:01:00,870
여러분의 컴퓨터에는 2GB밖에 없다면,
 
27
00:01:00,870 --> 00:01:02,640
이 시점에서
 
28
00:01:02,640 --> 00:01:08,310
컴퓨터는 4GB의 가상 메모리를 물리 메모리로 매핑하고자 합니다. (스왑)
 
29
00:01:08,310 --> 00:01:10,020
문제는
 
30
00:01:10,020 --> 00:01:11,250
만약 4GB의 물리 메모리를 쓰려고 하는데
 
31
00:01:11,250 --> 00:01:12,299
더 이상의 메모리가 없을 때입니다.
 
32
00:01:12,299 --> 00:01:15,180
심지어 하드 드라이브에도 메모리가 없다면, 프로그램이 터질 거예요.
 
33
00:01:15,180 --> 00:01:17,310
이건 운영체제에서 관리합니다.
 
34
00:01:17,310 --> 00:01:19,380
다른 중요한 점은,
 
35
00:01:19,380 --> 00:01:22,080
우리가 두 개의 프로세스를 실행했을 때
 
36
00:01:22,080 --> 00:01:25,409
가상 메모리이기 때문에,
 
37
00:01:25,409 --> 00:01:27,450
따지고 보면 그 두 프로세스는 같은 주소를 가지게 된다는 것입니다.
 
38
00:01:27,450 --> 00:01:30,600
실행된 두 개의 서로 다른 프로그램들이
 
39
00:01:30,600 --> 00:01:32,610
정확히 동일한 주소를 가지는 것에 놀라지 마세요.
 
40
00:01:32,610 --> 00:01:33,990
정상입니다! 엄밀히 따졌을 때,
 
41
00:01:33,990 --> 00:01:35,400
둘이 같은 메모리일지라도,
 
42
00:01:35,400 --> 00:01:36,900
물리적으로는
 
43
00:01:36,900 --> 00:01:38,250
MMU(메모리관리장치)라고 부르는 것이
 
44
00:01:38,250 --> 00:01:42,630
여러분의 컴퓨터상 올바른 위치에 프로그램들을 즐겁게 넣고 있을 거니까요.
 
45
00:01:42,630 --> 00:01:45,479
결론적으로 포인터는
 
46
00:01:45,479 --> 00:01:47,070
변수의 주소를 가져와
 
47
00:01:47,070 --> 00:01:48,869
여러분이 접근하고 사용할 수 있도록 하는
 
48
00:01:48,869 --> 00:01:50,460
도구입니다.
 
49
00:01:50,460 --> 00:01:53,540
엄청나게 유용하다는 걸 알게 될 거예요!
<< translated by inyang, chelee, mki, yeslee, mseo and ji-kim:) >>
