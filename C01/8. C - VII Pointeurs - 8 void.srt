1
00:00:00,000 --> 00:00:04,560
이 영상에서 void, 더 정확하게는 void 포인터에 관해 이야기 할 것입니다.

2
00:00:04,560 --> 00:00:08,160
void는 이미 보고 사용한 키워드입니다.

3
00:00:08,160 --> 00:00:10,590
일반적으로 함수는 아무것도 반환하지 않거나,

4
00:00:10,590 --> 00:00:14,009
어떤 매개 변수도 사용하지 않습니다. 이제, 다른 용도로 사용할 것입니다.

5
00:00:14,009 --> 00:00:16,920
처음부터, 포인터는 주소 값이라고 말했었죠.

6
00:00:16,920 --> 00:00:18,660
주소는 주소죠…

7
00:00:18,660 --> 00:00:23,279
사실 int * 또는 char * 등으로 씁니다

8
00:00:23,279 --> 00:00:27,000
이 주소에 있는 값의 자료형을 정의할 수 있습니다.

9
00:00:27,000 --> 00:00:31,470
그러나, 주소는 주소이고... 이것이 키워드 "void *"에 사용되는 것이죠.

10
00:00:31,470 --> 00:00:36,270
소소한 예시를 보여드리겠습니다. 그래서 void *

11
00:00:36,270 --> 00:00:40,770
void *ptr을 선언했습니다. int *ptr_i를 선언할 겁니다.

12
00:00:40,770 --> 00:00:47,280
예를 들어 char *ptr_c를 선언하고,

13
00:00:47,280 --> 00:00:50,579
ptr_i를 쓰면 벌써 볼 수 있을 거예요

14
00:00:50,579 --> 00:00:57,809
ptr_c와 같습니다. 어떻게 됩니까? 경고가 뜨네요. 네, 정상입니다.

15
00:00:57,809 --> 00:00:59,399
컴파일러가 말합니다: 기다려!!, 기다려요!!!

16
00:00:59,399 --> 00:01:03,840
뭐 하는 거예요? 오른쪽에는 char *가 있고 왼쪽에는 int *가 있습니다

17
00:01:03,840 --> 00:01:07,939
좋아요, 둘 다 주소는 맞는데 타입이 같지 않아서 문제가 생길 거예요

18
00:01:07,939 --> 00:01:12,600
왼쪽에 ptr을 쓰고 오른쪽에 ptr_c를 쓰면 그렇게 되나요?

19
00:01:12,600 --> 00:01:16,890
더 이상의 경고는 없습니다.

20
00:01:16,890 --> 00:01:22,049
왜냐고요? 컴파일러는 *가 주소라는 것을 알기 때문에

21
00:01:22,049 --> 00:01:25,710
이 경우에는, 마치 이렇게 말한 것과 같죠. "내가 하는 일을 알고 있습니다. 나를 내버려 두세요,

22
00:01:25,710 --> 00:01:29,520
오른쪽에 있는 주소를 가지고 왼쪽에 있는 변수에 넣으세요, 제발!

23
00:01:29,520 --> 00:01:31,979
그건 void *이고, 내가 무슨 행동을 하는지 압니다.

24
00:01:31,979 --> 00:01:35,189
제가 알아서 할 테니 신경 쓰지 마세요."

25
00:01:35,189 --> 00:01:39,960
모든 포인터 유형에서 동작합니다.

26
00:01:39,960 --> 00:01:42,810
이걸 써볼 수 있어요... 완전히 바보 같지만, 잘 될 거예요

27
00:01:42,810 --> 00:01:46,470
ptr의 주소를 가져갔는데 ptr의 주소는 주소입니다.

28
00:01:46,470 --> 00:01:51,329
그리고 ptr에 넣었어요... 동작하네요!

29
00:01:51,329 --> 00:01:54,750
기본적으로 &ptr을 가지고 있습니다.

30
00:01:54,750 --> 00:01:57,479
이건 void를 가리키는 포인터입니다.

31
00:01:57,479 --> 00:02:02,490
주소니까, 동작할 거예요. 대입은 재밌게 할 수 있어요

32
00:02:02,490 --> 00:02:07,099
ptr = ptr_i도 동작합니다.

33
00:02:07,099 --> 00:02:11,110
자! 다른 방향에서도 동작합니다.

34
00:02:11,110 --> 00:02:14,720
자료형을 직접 구체화할 수 있다는 것을 의미합니다.

35
00:02:14,720 --> 00:02:18,500
구체화한 주소가 없습니다. 캐스팅하지 않고도 타입을 구체화 할 수 있어요

36
00:02:18,500 --> 00:02:21,320
예를 들어, 이것을 char *로 바꿀 것입니다. 동작합니다.

37
00:02:21,320 --> 00:02:25,040
int *에서도 동작하고, 작성할 필요가 없죠...

38
00:02:25,040 --> 00:02:28,490
이것의 주요 용도 중 하나는 예를 들어, write입니다.

39
00:02:28,490 --> 00:02:33,860
제가 보여드릴게요... "write"를 통해 실제로 어떤 것을 쓸 수 있습니다.

40
00:02:33,860 --> 00:02:36,440
메모리에서, 그리고 주소에서요. write 함수에 주소 값을 주고,

41
00:02:36,440 --> 00:02:39,110
write를 통해 바이너리 파일을 쓸 수 있기 때문에 원하는 대로 씁니다.

42
00:02:39,110 --> 00:02:43,550
char를 쓸 수도 있고, 읽을 수 있는 문자를 쓸 수도 있고, 읽을 수 없는 문자를 쓸 수도 있습니다.

43
00:02:43,550 --> 00:02:46,670
여기에 void *가 아니라 char *가 있다면요

44
00:02:46,670 --> 00:02:49,700
예를 들어, 메모리에 write를 하고 싶어요, 파일에서 무언가를,

45
00:02:49,700 --> 00:02:55,580
(int, values 등등) write 하기 원할 때마다 종종 사용됩니다.

46
00:02:55,580 --> 00:02:58,100
예를 들어, 비디오 게임을 상상해보세요.

47
00:02:58,100 --> 00:03:01,160
읽을 수 있는 문자가 있는지 없는지 알 수 없습니다.

48
00:03:01,160 --> 00:03:05,660
거기 안에 바이너리나 무언가가 있다면요... 변환해야 할 겁니다

49
00:03:05,660 --> 00:03:08,300
원하는 것이 포인터가 가리키는 곳에 있다면,

50
00:03:08,300 --> 00:03:10,850
이렇게 말해야 합니다 “아 안돼 사실 그건 char *였어” 그리고

51
00:03:10,850 --> 00:03:13,910
매번 수많은 에러를 만나고... 이제 그걸 void *에 대입하고 말합니다:

52
00:03:13,910 --> 00:03:18,350
"이 주소에 무엇이 있는지 보고 싶어. 그리고 그 파일에

53
00:03:18,350 --> 00:03:22,430
표준 출력으로 write해... 내가 처리할게”

54
00:03:22,430 --> 00:03:25,489
이것은 용도의 하나이며, 또 다른 용도는 다음과 같습니다.

55
00:03:25,489 --> 00:03:29,540
"메모리를 동적할당하고, 그걸 직접 관리할게."

56
00:03:29,540 --> 00:03:33,830
여러분이 수많은 메모리를 요청했고, 직접 관리해야 합니다. 그래서 말합니다:

57
00:03:33,830 --> 00:03:36,830
"메모리의 이 부분은 int로 읽힐 것입니다.

58
00:03:36,830 --> 00:03:39,320
다른 부분은 float 등으로 읽힙니다."

59
00:03:39,320 --> 00:03:43,880
이는 "void *"의 주요 용도 중 하나입니다.

60
00:03:43,880 --> 00:03:47,989
함수가 메모리에 정확히 뭐가 들어있는지 모르고 그것을 사용하기 때문에,

61
00:03:47,989 --> 00:03:51,290
혹은 여러분이 원하는 대로 메모리를 관리하기 원하기 때문에,

62
00:03:51,290 --> 00:03:53,900
조심해서 사용하세요!!

63
00:03:53,900 --> 00:03:57,470
이걸 쓰는 사람을 거의 못 봤습니다. 왜냐하면 매우 어렵기 때문입니다.

64
00:03:57,470 --> 00:04:01,459
아주 특별한 경우에 유용합니다.

65
00:04:01,459 --> 00:04:04,510
이제 "void *"가 무엇인지 알게 되었습니다!
<< translated by inyang, mki, ji-kim, yeslee, mseo and chelee :) >>
