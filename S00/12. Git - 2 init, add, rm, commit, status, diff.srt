1
00:00:01,000 --> 00:00:06,000
이번 비디오는 깃의 동작에 대한 것입니다.

2
00:00:06,000 --> 00:00:11,000
이전의 비디오에서 보셨다시피 깃은 정보를 중앙화하기 위해 디자인되었습니다.

3
00:00:11,000 --> 00:00:15,000
그러나 또한 완전히 탈중앙화된 툴이죠.

4
00:00:15,000 --> 00:00:21,000
우리는 모두 옳은 버전의 자료가 어딘가에, 혹은 다른 곳에 있다는 사실에 동의할 수 있습니다.

5
00:00:21,000 --> 00:00:24,000
그러나 이건 통상적인 동의일 뿐입니다.

6
00:00:24,000 --> 00:00:29,000
여러분은 여러분의 버전이 옳다고 말할 수도 있습니다, 다른 사람들과 정말로 토론할 수는 없겠지만요.

7
00:00:29,000 --> 00:00:34,000
깃의 이점은 다른 사람들이 무엇을 했는지에 대한 기록들을 보관한다는 것입니다.

8
00:00:34,000 --> 00:00:37,000
왜냐하면 어느 날, 여러분은 여러분의 버전들을 통합해버릴지도 모릅니다.

9
00:00:37,000 --> 00:00:42,000
모두 같은 시작점을 공유하기 때문이에요.

10
00:00:42,000 --> 00:00:46,000
가봅시다, 이 툴을 사용해보자고요.

11
00:00:46,000 --> 00:00:50,000
깃을 실행시키면, 많은 명령어가 딸린 것을 볼 수 있습니다.

12
00:00:50,000 --> 00:00:54,000
이것들을 확인해볼 수 있습니다, help를 사용할 수 있습니다.

13
00:00:54,000 --> 00:00:58,000
help는 각 명령어가 어떻게 동작하는지에 대한 정보를 줍니다.

14
00:00:58,000 --> 00:01:04,000
이 비디오에서, 저는 깃의 기초부터 어떻게 시작할 수 있는지 알려드리겠습니다. 로컬에서요.

15
00:01:04,000 --> 00:01:07,000
원격 깃이 필요치 않습니다. 깃 서버 역시도 필요 없습니다.

16
00:01:07,000 --> 00:01:10,000
우리는 로컬에서 깃을 사용할 수 있습니다. 어떻게 동작할까요?

17
00:01:10,000 --> 00:01:14,000
먼저 우리의 디렉토리를 깃 디렉토리로 전환해야 합니다.

18
00:01:14,000 --> 00:01:19,000
git init 명령어를 사용해서 우리의 디렉토리를 깃 디렉토리로 바꿀 수 있습니다.

19
00:01:19,000 --> 00:01:22,000
여기서 벌어진 일은

20
00:01:22,000 --> 00:01:25,000
.git이 생겨났다는 것뿐입니다, 이제는 .git 폴더가 있습니다.

21
00:01:25,000 --> 00:01:27,000
안에서는 일부 정보를 찾을 수 있습니다.

22
00:01:27,000 --> 00:01:30,000
여기서 볼 수 있어요, 가서 확인해보세요

23
00:01:30,000 --> 00:01:37,000
하지만 지금은 다른 것에 집중해볼 겁니다.

24
00:01:37,000 --> 00:01:39,000
이제는 다른 명령어들을 써볼 수 있습니다.

25
00:01:39,000 --> 00:01:41,000
여러분이 매번 쓰게 될 명령어는 git status입니다.

26
00:01:41,000 --> 00:01:45,000
git status는 여러분의 현재 상태를 알려주는 명령어입니다.

27
00:01:45,000 --> 00:01:48,000
지금은 우리가 master branch에 있다고 알려주는군요.

28
00:01:48,000 --> 00:01:51,000
브랜치가 무엇인지는 나중에 설명해드리겠습니다.

29
00:01:51,000 --> 00:01:53,000
지금은 우리가 마스터라는 브랜치에 있다는 것만 알아두세요.

30
00:01:53,000 --> 00:01:55,000
지금은 아무 커밋도 없습니다.

31
00:01:55,000 --> 00:01:58,000
정상입니다, 방금 git init을 했으므로 아무것도 없습니다.

32
00:01:58,000 --> 00:02:00,000
깃은 또한 아무것도 추가할 게 없다고 알려줍니다.

33
00:02:00,000 --> 00:02:02,000
커밋할 파일도, 수정된 파일도 없군요.

34
00:02:02,000 --> 00:02:04,000
이제 행동을 시작해봅시다.

35
00:02:04,000 --> 00:02:06,000
pouet이라는 파일을 만들어서

36
00:02:06,000 --> 00:02:08,000
다시 git status를 해보면

37
00:02:08,000 --> 00:02:14,000
깃은 우리가 여전히 마스터 브랜치에 있으며, 커밋은 없다고 알려줍니다.

38
00:02:14,000 --> 00:02:19,000
그러나 추적되지 않은 파일이 있죠, 이건 깃 디렉토리에 있지만 사용하지는 않아요

39
00:02:19,000 --> 00:02:23,000
깃은 이 파일에 대한 기록이 없습니다.

40
00:02:23,000 --> 00:02:26,000
깃은 이 파일을 git add 하라고 조언해요.

41
00:02:26,000 --> 00:02:31,000
이게 우리가 해야 할 일입니다, git add pouet

42
00:02:31,000 --> 00:02:38,000
여러분이 이걸 하면, 이 파일은 커밋을 통해 전송될 준비를 마친 겁니다.

43
00:02:38,000 --> 00:02:44,000
이 파일, 이 파일, 다른 파일, 전체 프로젝트의

44
00:02:44,000 --> 00:02:49,000
스냅샷을 찍는 거예요, 이 파일의 수정사항들 기록을 통해서요

45
00:02:49,000 --> 00:02:52,000
만약 제가 10개의 파일을 수정하고

46
00:02:52,000 --> 00:02:55,000
왼쪽 5개의 파일만 스냅샷만 원해요

47
00:02:55,000 --> 00:02:59,000
왼쪽 5개의 스냅샷을 또 찍고, 이번엔 오른쪽도 찍어봅시다.

48
00:02:59,000 --> 00:03:01,000
둘이 다르다는 걸 명확히 하고 싶어서요.

49
00:03:01,000 --> 00:03:04,000
프로젝트의 서로 다른 두 파트를 작업했습니다

50
00:03:04,000 --> 00:03:08,000
서로 다르게 커밋해봅시다

51
00:03:08,000 --> 00:03:10,000
기록을 살펴보는 데에 도움이 될 거예요, 기록은 깃의 주요 특징이죠.

52
00:03:10,000 --> 00:03:12,000
누가 무엇을 언제 했는지 알기 위해서요

53
00:03:12,000 --> 00:03:15,000
디버깅할 때도 도움이 돼요 유용하죠!

54
00:03:15,000 --> 00:03:19,000
git add pouet을 했어요, git status를 해볼까요

55
00:03:19,000 --> 00:03:21,000
여전히 마스터 브랜치에 있고 커밋은 없어요

56
00:03:21,000 --> 00:03:27,000
그러나 제가 커밋할 수 있다는 변화가 생겼군요

57
00:03:27,000 --> 00:03:30,000
pouet 파일을 커밋하기 위해 준비가 되었어요

58
00:03:30,000 --> 00:03:37,000
보세요, 깃은 나이스하고 여러분에게 말해줍니다

59
00:03:37,000 --> 00:03:43,000
만약 여러분이 이 파일을 내리길 원하면 이 명령어를 쓰라고요

60
00:03:43,000 --> 00:03:48,000
이건 pouet을 untracked mode로 되돌려줄 겁니다

61
00:03:48,000 --> 00:03:50,000
완벽해요! 이제 여기에 있죠, 커밋할 수 있어요

62
00:03:50,000 --> 00:03:56,000
커밋 명령어는 텍스트를 적으라고 요구합니다, 제목처럼요

63
00:03:56,000 --> 00:04:02,000
저는 이걸 first commit이라고 할게요

64
00:04:02,000 --> 00:04:06,000
오 -m 없이 해봅시다

65
00:04:06,000 --> 00:04:10,000
이건 “여러분의 수정사항에 대한 커밋 메시지를 엔터 해주세요”이라고 알려줍니다

66
00:04:10,000 --> 00:04:16,000
텍스트를 추가해줘야 합니다, first commit이죠

67
00:04:16,000 --> 00:04:19,000
저장하고 끝냅시다

68
00:04:19,000 --> 00:04:26,000
뭔가 잘못됐어요, 볼까요

69
00:04:26,000 --> 00:04:30,000
제 에디터에 문제가 있군요

70
00:04:30,000 --> 00:04:40,000
이제 -m을 써봅시다, first commit

71
00:04:40,000 --> 00:04:45,000
이번에는 사용자 이름, 이메일이 특정되지 않았다고 말하네요

72
00:04:45,000 --> 00:04:52,000
git config를 사용해서 할 수 있는 것입니다

73
00:04:52,000 --> 00:04:56,000
이제 이름과 메일주소를 알려달라고 하는데

74
00:04:56,000 --> 00:05:00,000
원하는 대로 적으세요

75
00:05:00,000 --> 00:05:06,000
이제는, 더 이상의 문제가 없어야 합니다.

76
00:05:06,000 --> 00:05:10,000
커밋을 했어요, git log를 볼까요

77
00:05:10,000 --> 00:05:17,000
마스터 브랜치에 있고, 브랜치는 나중에 볼 거예요

78
00:05:17,000 --> 00:05:19,000
저는 HEAD에 있습니다, 마스터의 제일 윗부분이죠.

79
00:05:19,000 --> 00:05:23,000
저는 first commit이라는 커밋을 했어요, 날짜, 작가, 등등도 있죠

80
00:05:23,000 --> 00:05:28,000
git status를 해보면 이제는 아무것도 남아있지 않습니다

81
00:05:28,000 --> 00:05:33,000
기본 브랜치인 마스터에, 커밋할 게 없어요

82
00:05:33,000 --> 00:05:38,000
하지만 만약 pouet 파일을 수정한다면

83
00:05:38,000 --> 00:05:42,000
파일에 숫자 1을 추가하면요

84
00:05:42,000 --> 00:05:45,000
git status는 내가 마스터 브랜치에 있고, 수정사항이 생겼다고 알려줘요

85
00:05:45,000 --> 00:05:49,000
제가 추적하는 파일이 있죠

86
00:05:49,000 --> 00:05:54,000
이 변화를 어떻게 볼 수 있을까요? Git diff를 쳐봅시다

87
00:05:54,000 --> 00:05:58,000
git diff가 변화를 보여줍니다!

88
00:05:58,000 --> 00:06:02,000
원본과 로컬에서 만들어진 수정본 간에

89
00:06:02,000 --> 00:06:07,000
차이점이 있다고 알려주네요

90
00:06:07,000 --> 00:06:10,000
1이 있는 줄이 나타난 걸 볼 수 있습니다

91
00:06:10,000 --> 00:06:18,000
git add를 통해 커밋된 파일을 업데이트하는 게 좋지 않겠냐고 조언하는군요

92
00:06:18,000 --> 00:06:24,000
혹은 git checkout -- file을 하든가요, 이건 파일을 원본으로 돌려놓을 겁니다

93
00:06:24,000 --> 00:06:28,000
이렇게나 단순합니다

94
00:06:28,000 --> 00:06:31,000
파일을 git add 했어요

95
00:06:31,000 --> 00:06:34,000
git status를 통해 파일이 저기에 있음을 볼 수 있습니다

96
00:06:34,000 --> 00:06:38,000
파일을 커밋하기 전에, 제가 뭔가를 더 수정하고 싶다고 해볼까요

97
00:06:38,000 --> 00:06:45,000
2도 추가해봅시다

98
00:06:45,000 --> 00:06:50,000
로컬 깃에 pouet 파일이 저장되었습니다

99
00:06:50,000 --> 00:06:53,000
pouet 파일은 커밋될 준비가 되어있어요

100
00:06:53,000 --> 00:06:58,000
그리고 이건 제가 로컬에서 수정한 pouet 파일이죠

101
00:06:58,000 --> 00:07:05,000
git diff를 통해, 1이 쓰인 줄이 하나 있었고 이제는 2도 있다고 알려줍니다

102
00:07:05,000 --> 00:07:10,000
커밋될 준비를 한 staged 버전과

103
00:07:10,000 --> 00:07:15,000
제 컴퓨터에서 새로 수정된 버전의 차이점이에요

104
00:07:15,000 --> 00:07:19,000
git add pouet을 하고 git status를 하면

105
00:07:19,000 --> 00:07:21,000
staged만 남아있습니다, 정상이에요

106
00:07:21,000 --> 00:07:27,000
만약 제가 git commit -m “2nd”라고 한다면

107
00:07:27,000 --> 00:07:31,000
아무것도 남아있지 않죠, 모든 것을 커밋했습니다

108
00:07:31,000 --> 00:07:38,000
git log를 통해 제 첫 커밋과 두 번째 커밋을 볼 수 있어요

109
00:07:38,000 --> 00:07:44,000
각각은 독자적인 커밋 id를 가지고 있고 그걸로 찾을 수 있습니다

110
00:07:44,000 --> 00:07:48,000
축약하자면, 파일을 수정했을 때 git status를 할 수 있습니다

111
00:07:48,000 --> 00:07:50,000
무슨 일이 일어나는지 보려면요

112
00:07:50,000 --> 00:07:52,000
git init은 .git 폴더를 만들어줍니다

113
00:07:52,000 --> 00:07:59,000
파일을 추가하기 위해 git add를 할 수 있고, git commit을 이용해서는 커밋할 수 있습니다

114
00:07:59,000 --> 00:08:02,000
가장 먼저 알아야 할 부분입니다

115
00:08:02,000 --> 00:08:08,000
git diff를 통해 마지막 커밋본과 내 로컬본의 차이를 볼 수 있습니다

116
00:08:08,000 --> 00:08:10,000
혹은 컴퓨터에서 커밋하려고 했던 준비본(staged)과도요

117
00:08:10,000 --> 00:08:13,000
여기는 git의 시작점입니다

118
00:08:13,000 --> 00:59:59,000
다음 비디오에서는 다른 명령어들과 브랜치, 원격 서버에 파일을 보내는 방법 등을 알아보겠습니다.
<<translated by mseo, ji-kim, yeslee, mki and inyang :)>>
