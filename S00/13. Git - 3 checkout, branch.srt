1
00:00:01,000 --> 00:00:03,000
이 비디오는 브랜치에 대한 내용을 다룹니다.

2
00:00:03,000 --> 00:00:06,000
깃의 브랜치는 하위 프로젝트에서 작업할 때 도움이 될 것입니다.

3
00:00:06,000 --> 00:00:10,000
작업물이 있고, 마스터 브랜치에서 작업하고 있다고 상상해보세요.

4
00:00:10,000 --> 00:00:13,000
작업물에 버그가 있지만, 이 작업물을 두고 수정 작업을 하고 싶을 때

5
00:00:13,000 --> 00:00:21,000
다른 브랜치에서 작업을 수행할 수 있습니다.
이 브랜치에서 새로운 기능에 대한 그룹 작업도 수행할 수 있고, 새로 커밋할 수도 있습니다.

6
00:00:21,000 --> 00:00:26,000
그게 새 코드일 수도 있고요.

7
00:00:26,000 --> 00:00:30,000
사용자, 혹은 다른 사용자가 리포트한 마스터 브랜치의 버그로 돌아갈 수도 있고,

8
00:00:30,000 --> 00:00:38,000
이 버그를 고치고, 마스터 브랜치와 병합하여 마스터에서 모든 작업이 수행되도록 할 수 있습니다.

9
00:00:38,000 --> 00:00:40,000
이것이 고전적인 브랜치 사용법입니다.

10
00:00:40,000 --> 00:00:46,000
merge가 무엇인지 설명하기 전에, 브랜치를 생성해보고

11
00:00:46,000 --> 00:00:50,000
한 브랜치에서 다른 브랜치로 넘어가는 법과 어떻게 사용하는지 배워보겠습니다.

12
00:00:50,000 --> 00:00:55,000
시작해보죠. 지난번처럼 로컬 깃에 있습니다.

13
00:00:55,000 --> 00:01:01,000
마스터 브랜치에 있고, 이름 변경은 가능하나 그러지 않기를 조언할게요.

14
00:01:01,000 --> 00:01:04,000
아직 커밋하지 않은 것이 없는 상태입니다.

15
00:01:04,000 --> 00:01:06,000
두 개의 과거 커밋이 있습니다, 딱히 문제는 없어요.

16
00:01:06,000 --> 00:01:08,000
이제, 어떤 브랜치가 존재하는지 볼까요?

17
00:01:08,000 --> 00:01:12,000
브랜치를 관리하기 위해 git branch 명령어를 씁니다.

18
00:01:12,000 --> 00:01:16,000
마스터라는 브랜치 하나만 있습니다.

19
00:01:16,000 --> 00:01:20,000
-a 옵션을 주어 보아도, 한 개의 브랜치만 보입니다.

20
00:01:20,000 --> 00:01:23,000
브랜치를 만들고 싶다면...

21
00:01:23,000 --> 00:01:26,000
git branch pouet 을 써볼게요.

22
00:01:26,000 --> 00:01:30,000
그러면, pouet이란 이름의 브랜치가 생성됩니다.

23
00:01:30,000 --> 00:01:38,000
다른 브랜치로 가고 싶다면 git checkout (브랜치 이름)을 씁니다.

24
00:01:38,000 --> 00:01:42,000
그럼 pouet 브랜치로 이동합니다.

25
00:01:42,000 --> 00:01:45,000
git status를 쓰면, pouet 브랜치에 있는 것을 볼 수 있습니다.

26
00:01:45,000 --> 00:01:55,000
git log를 보면, 내가 만든 브랜치가 commit과 동일한 위치에 있음을 알 수 있습니다.

27
00:01:55,000 --> 00:02:01,000
이 부분에 초점을 맞춘 채, git checkout을 사용하면 특정 커밋으로 이동할 수 있습니다.

28
00:02:01,000 --> 00:02:06,000
이 로그를 복사해서 쓰면, 이것은 제일 최근의 것이 아니라며 경고를 표시합니다.

29
00:02:06,000 --> 00:02:12,000
그래서 조심히 써야 한다 알려줍니다.

30
00:02:12,000 --> 00:02:14,000
그리고 "git checkout -b"를 쓰면 새 분기를 만들 수 있다고도 설명해줍니다.

31
00:02:14,000 --> 00:02:16,000
이건 2초 후에 다룰 예정입니다.

32
00:02:16,000 --> 00:02:20,000
다시 돌아와서, 이런 식으로 브랜치를 만들 수 있습니다.

33
00:02:20,000 --> 00:02:29,000
지금 과거에 커밋했던 것 위에서 이 분기에 대한 새로운 브랜치를 만들 수 있습니다.

34
00:02:29,000 --> 00:02:36,000
최상위의, 마스터가 아닌 브랜치에서도 다른 브랜치를 만들 수 있는 겁니다.

35
00:02:36,000 --> 00:02:40,000
지금 당장은 쓸 일이 없지만 알아두시고, youpi라는 브랜치를 새로 생성해봅시다.

36
00:02:40,000 --> 00:02:46,000
git status를 보면 아직 이 과거의 커밋에 있다는 것을 볼 수 있습니다.

37
00:02:46,000 --> 00:02:48,000
youpi로 가보면,

38
00:02:48,000 --> 00:02:50,000
git status로 youpi에 있음을 볼 수 있고

39
00:02:50,000 --> 00:02:57,000
git log로 현재 youpi가 이전의 커밋에 있음을 볼 수 있습니다.

40
00:02:57,000 --> 00:03:00,000
이제 git checkout master를 쓰면 마스터 브랜치로 돌아갑니다.

41
00:03:00,000 --> 00:03:06,000
git log를 보면 제일 최근의 커밋에 마스터가 있음을 볼 수 있고

42
00:03:06,000 --> 00:03:10,000
그 아래에 youpi가 있음을 볼 수 있습니다.

43
00:03:10,000 --> 00:03:14,000
이제 조금 더 정리해보죠.

44
00:03:14,000 --> 00:03:20,000
git branch -a를 쓰면 세 개의 브랜치를 볼 수 있습니다.

45
00:03:20,000 --> 00:03:25,000
-d 옵션을 쓰면… 이건 youpi 브랜치를 삭제하겠다는 말이 됩니다.

46
00:03:25,000 --> 00:03:30,000
이 작업을 pouet에도 하면, pouet 브랜치 또한 지워집니다.

47
00:03:30,000 --> 00:03:35,000
방금 브랜치를 지웠습니다. 그리고 브랜치는 그저 커밋을 기록하는 방법일 뿐입니다.

48
00:03:35,000 --> 00:03:38,000
git branch -a로 확인해보면 브랜치는 더 이상 3개가 아닙니다.

49
00:03:38,000 --> 00:03:43,000
git log로 봐도 HEAD->master뿐입니다.

50
00:03:43,000 --> 00:03:46,000
git checkout과 git checkout -b 명령어를 이용해

51
00:03:46,000 --> 00:03:48,000
브랜치를 만드는 방법에 대해 알려드렸습니다.

52
00:03:48,000 --> 00:03:50,000
브랜치에 이름을 다는 것도 알려드렸네요.

53
00:03:50,000 --> 00:03:55,000
다시 pouet 브랜치를 만들고 이동해볼게요.

54
00:03:55,000 --> 00:04:10,000
그래서 현재 pouet 브랜치에 있고,
새 브랜치의 생성은 항상 여러분이 현재 위치한 커밋에서부터 시작됩니다.

55
00:04:10,000 --> 00:04:14,000
git branch와 git checkout을 보았습니다.

56
00:04:14,000 --> 00:04:16,000
이제 git checkout에 대한 마지막 설명이 있겠습니다.

57
00:04:16,000 --> 00:04:18,000
이 브랜치 안의 pouet 파일을 편집한다고 상상해보세요.

58
00:04:18,000 --> 00:04:22,000
git status는 이 파일을 추적한다고 알려주고 있습니다.

59
00:04:22,000 --> 00:04:35,000
git checkout을 사용하여 이 파일의 마지막 버전으로 돌아갈 수 있습니다.

60
00:04:35,000 --> 00:04:38,000
이 작업은 조심히 하세요. 수정한 내용을 잃게 될 겁니다.

61
00:04:38,000 --> 00:04:48,000
아무튼, 그래서 git checkout -- pouet를 하고 git status를 하면,
모든 것이 사라졌습니다.

62
00:04:48,000 --> 00:04:55,000
모든 편집내용이 사라지고, pouet 파일은 이전 버전의 내용인 2로 돌아갑니다.

63
00:04:55,000 --> 00:04:58,000
모든 편집은 취소된 것과 같은 상태가 된 거죠.

64
00:04:58,000 --> 00:05:00,000
만약 pouet을 stage에 올렸다면 이 작업은 유효하지 않았을 겁니다.

65
00:05:00,000 --> 00:05:05,000
예시를 보여드리죠.

66
00:05:05,000 --> 00:05:10,000
git status로 pouet이 편집된 것을 볼 수 있습니다.

67
00:05:10,000 --> 00:05:14,000
git add pouet을 하면, 커밋을 위해 pouet이 stage 됩니다.

68
00:05:14,000 --> 00:05:16,000
보셨다시피 이제 git checkout을 쓰라고 말해주지 않습니다.

69
00:05:16,000 --> 00:05:22,000
그리고 시도해보아도 변하는 것은 없습니다.

70
00:05:22,000 --> 00:05:28,000
git checkout -- pouet를 사용해본다면

71
00:05:28,000 --> 00:05:32,000
아무것도 수정되지 않았기 때문에, pouet 브랜치의 파일은 변하지 않습니다.

72
00:05:32,000 --> 00:05:39,000
조금 더 명확하게 말해보자면

73
00:05:39,000 --> 00:05:42,000
pouet을 다시 4로 편집하고 보면

74
00:05:42,000 --> 00:05:44,000
pouet은 지금 두 개의 다른 장소에 있게 됩니다.

75
00:05:44,000 --> 00:05:47,000
stage에 있는 3이라는 정보를 가진 pouet과

76
00:05:47,000 --> 00:05:50,000
로컬에 있는, 4라는 정보를 가진 pouet이 생기겠죠.

77
00:05:50,000 --> 00:05:59,000
git diff를 쓰면 두 파일의 다른 점을 볼 수 있습니다.
3 to 4죠, 2 to 4가 아니라.

78
00:05:59,000 --> 00:06:06,000
stage에 파일을 올렸기 때문에, 커밋을 준비하게 됩니다.

79
00:06:06,000 --> 00:06:10,000
하지만 진짜 커밋한 것은 아닙니다.

80
00:06:10,000 --> 00:06:15,000
미래의 커밋… 이라고 표현하는 게 좋겠네요.

81
00:06:15,000 --> 00:06:17,000
그래서 내 파일을 git checkout 하면

82
00:06:17,000 --> 00:06:20,000
커밋할 것(4로 편집된 것)이 사라집니다.

83
00:06:20,000 --> 00:06:23,000
이젠 편집된 파일만 있습니다.

84
00:06:23,000 --> 00:06:29,000
이제 git reset HEAD pouet을 쓰면

85
00:06:29,000 --> 00:06:31,000
이제 unstaged 되었죠.

86
00:06:31,000 --> 00:06:34,000
이 상태에서 git checkout을 한 번 더 하게 되면

87
00:06:34,000 --> 00:06:38,000
이전 버전인 2까지 돌아갑니다.

88
00:06:38,000 --> 00:06:43,000
이제 브랜치를 만들고, 전환하는 법을 알게 되었습니다.

89
00:06:43,000 --> 00:06:51,000
checkout을 사용하여 잘못 편집된 기록을 되돌리는 방법과

90
00:06:51,000 --> 00:59:59,000
이전 버전으로 돌아가는 법 또한 배웠습니다.
<< translated by mki, yeslee, inyang, ji-kim and mseo :) >>
